"""
main.py ‚Äì Orchestrateur complet du pipeline LLM
Description :
    Ce script ex√©cute automatiquement toutes les √©tapes du pipeline de sp√©cialisation d‚Äôun mod√®le LLM disponible en source ouverte
    (ex. Mistral-7B) : pr√©traitement, fine-tuning, indexation, RAG, RLHF et √©valuation.
"""

import os
import subprocess
import datetime
import logging

# Configuration des chemins principaux
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
SCRIPTS_DIR = os.path.join(BASE_DIR, "scripts")
LOG_DIR = os.path.join(BASE_DIR, "outputs", "logs")

os.makedirs(LOG_DIR, exist_ok=True)

# Configuration du logging
log_path = os.path.join(LOG_DIR, f"pipeline_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.log")
logging.basicConfig(
    filename=log_path,
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

# Liste ordonn√©e des √©tapes √† ex√©cuter
PIPELINE_STEPS = [
    ("Pr√©paration du corpus", "prepare_corpus.py"),
    ("Fine-tuning LoRA", "fine_tune_lora.py"),
    ("Indexation vectorielle RAG", "rag_inference.py"),
    ("Fusion des feedbacks humains", "merge_feedbacks_rlhf.py"),
    ("Entra√Ænement du Reward Model", "train_reward_model.py"),
    ("√âvaluation automatique du mod√®le", "evaluate_model.py"),
]

def run_step(label, script_name):
    """
    Ex√©cute un script Python du dossier /scripts et journalise sa sortie.
    """
    script_path = os.path.join(SCRIPTS_DIR, script_name)
    if not os.path.exists(script_path):
        logging.error(f"Script introuvable : {script_name}")
        return False

    logging.info(f"D√©marrage de l‚Äô√©tape : {label}")
    print(f"\n=== üöÄ {label} ===")

    try:
        result = subprocess.run(["python", script_path], capture_output=True, text=True, check=True)
        logging.info(result.stdout)
        print(result.stdout)
        return True
    except subprocess.CalledProcessError as e:
        logging.error(f"Erreur lors de l‚Äôex√©cution de {script_name} : {e.stderr}")
        print(f"‚ùå Erreur : {e.stderr}")
        return False

def main():
    print("\n==============================")
    print("üß† PIPELINE DE SP√âCIALISATION LLM")
    print("==============================\n")

    for step_label, script_file in PIPELINE_STEPS:
        success = run_step(step_label, script_file)
        if not success:
            print(f"Arr√™t du pipeline suite √† une erreur dans l‚Äô√©tape : {step_label}")
            break
        else:
            print(f"√âtape termin√©e : {step_label}")

    print("\n Pipeline termin√©. Voir le log complet dans :", log_path)

if __name__ == "__main__":
    main()
